# Configuration for Alacritty, the GPU enhanced terminal emulator


# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
#env:
  # TERM env customization. Default is xterm-256color
  # Note: the default TERM value `xterm-256color` does not
  # specify all features alacritty supports. This does pose
  # a few issues with programs relying on terminfo and the
  # `tput` command
  #TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24
  

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Tamzen for Powerline  # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Tamzen for Powerline # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Tamzen for Powerline # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 14.0
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    #2.0
    y: 0
    # -7.0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
debug.render_timer: false

# The definition of color schemes.
schemes:
  gruvbox_material_hard_dark: &gruvbox_material_hard_dark
    primary:
      background: '0x1d2021'
      foreground: '0xd4be98'
    normal:
      black:   '0x32302f'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
    bright:
      black:   '0x32302f'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
  gruvbox_material_medium_dark: &gruvbox_material_medium_dark
    primary:
      background: '0x282828'
      foreground: '0xd4be98'
    normal:
      black:   '0x3c3836'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
    bright:
      black:   '0x3c3836'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
  gruvbox_material_soft_dark: &gruvbox_material_soft_dark
    primary:
      background: '0x32302f'
      foreground: '0xd4be98'
    normal:
      black:   '0x45403d'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
    bright:
      black:   '0x45403d'
      red:     '0xea6962'
      green:   '0xa9b665'
      yellow:  '0xd8a657'
      blue:    '0x7daea3'
      magenta: '0xd3869b'
      cyan:    '0x89b482'
      white:   '0xd4be98'
  gruvbox_material_hard_light: &gruvbox_material_hard_light
    primary:
      background: '0xf9f5d7'
      foreground: '0x654735'
    normal:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xf2e5bc'
    bright:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xf2e5bc'
  gruvbox_material_medium_light: &gruvbox_material_medium_light
    primary:
      background: '0xfbf1c7'
      foreground: '0x654735'
    normal:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xeee0b7'
    bright:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xeee0b7'
  gruvbox_material_soft_light: &gruvbox_material_soft_light
    primary:
      background: '0xf2e5bc'
      foreground: '0x654735'
    normal:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xe6d5ae'
    bright:
      black:   '0x654735'
      red:     '0xc14a4a'
      green:   '0x6c782e'
      yellow:  '0xb47109'
      blue:    '0x45707a'
      magenta: '0x945e80'
      cyan:    '0x4c7a5d'
      white:   '0xe6d5ae'

# Apply the color scheme.
colors: *gruvbox_material_medium_dark


# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V,        mods: Control|Shift, action: Paste                        }
  - { key: C,        mods: Control|Shift, action: Copy                         }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[1~",  mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[4~",  mode: ~AppCursor  }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~",  mode: AppKeypad   }
  - { key: Delete,                  chars: "\x1b[P",   mode: ~AppKeypad  }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_cursor_when_typing: false
  
selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"


# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#shell:
#  program: /bin/bash
#  args:
#    - --login

