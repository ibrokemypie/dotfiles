zmodload zsh/datetime
start=$EPOCHREALTIME

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


#
# Exports
#

export HISTFILE=~/.histfile
export HISTSIZE=1000
export SAVEHIST=1000
export EDITOR=micro
export GIT_EDITOR=micro
export RUSTC_WRAPPER=sccache
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
export GPG_TTY=$(tty)
export FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --hidden"

{% if yadm.os == "Linux" %}
export WINEESYNC=1
export WINEFSYNC=1
export PAGER='moar'
export SYSTEMD_LESS='FRSMK'
export SYSTEMD_PAGER='moar'
{% endif %}


#
# Path
#

path+=("$HOME/.local/bin")
fpath+=("$HOME/.config/zsh/func")

{% if yadm.os == "Linux" %}
path+=('/usr/lib/ccache/bin/')
{% endif %}

{% if yadm.os == "Darwin" %}
path+=('/usr/local/bin/ccache' '/usr/local/opt/python/libexec/bin')
fpath+=("$(brew --prefix)/share/zsh/site-functions")
{% endif %}

#
# Options
#

bindkey -e
setopt sharehistory autocd extendedglob append_history \
	   hist_ignore_dups hist_expire_dups_first hist_verify \
	   hist_ignore_space complete_aliases

# The following lines were added by compinstall
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} m:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'l:|=* r:|=*'
zstyle ':completion::complete:*' gain-privileges 1
zstyle ':completion:*' menu select
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'

autoload -Uz compinit edit-command-line zcalc $HOME/.config/zsh/func
compinit

zle -N edit-command-line

exit_zsh() { exit }
zle -N exit_zsh

zle -N history-substring-search-up
zle -N history-substring-search-down


#
# Sources
#

{% if yadm.os == "Linux" %}
source '/usr/lib/rbenv/completions/rbenv.zsh'
{% endif %}


source "$HOME/.config/zsh/evalcache/evalcache.plugin.zsh"
source "$HOME/.config/zsh/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
source "$HOME/.config/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
source "$HOME/.config/zsh/fzf-tab/fzf-tab.plugin.zsh"
source "$HOME/.config/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh"
source "$HOME/.config/zsh/powerlevel10k/powerlevel10k.zsh-theme"
source "$HOME/.config/zsh/forgit/forgit.plugin.zsh"


#
# Aliases
#

alias ls='exa'
alias tree='exa --tree'
alias nano='micro'
alias cat='bat'

if [ -z ${DISPLAY+x} ] ; then
	alias gpg="gpg --pinentry-mode loopback "
fi

{% if yadm.os == "Linux" %}
alias cp='cp --reflink=auto'
alias tkg="bash $HOME/git/tkg/update.sh"
alias copy="xclip -selection c"
alias yay='paru'
alias whichpkg="pacman -Qo"
{% endif %}


#
# Bindings
#

bindkey '^X^e' edit-command-line
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^D' exit_zsh


#
# rbenv
#

_evalcache rbenv init - zsh

{% if yadm.os == "Linux" %}
#
# Completion rehash
#

TRAPUSR1() { rehash }

#
# Terminal title hooks
#

autoload -Uz add-zsh-hook

function xterm_title_precmd () {
	print -Pn -- '\e]2;%n@%m %~\a'
	[[ "$TERM" == 'screen'* ]] && print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-} \005{B}%~\005{-}\e\\'
}

function xterm_title_preexec () {
	print -Pn -- '\e]2;%n@%m %~ %# ' && print -n -- "${(q)1}\a"
	[[ "$TERM" == 'screen'* ]] && { print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-} \005{B}%~\005{-} %# ' && print -n -- "${(q)1}\e\\"; }
}

if [[ "$TERM" == (Eterm*|alacritty*|aterm*|gnome*|konsole*|kterm*|putty*|rxvt*|screen*|tmux*|xterm*) ]]; then
	add-zsh-hook -Uz precmd xterm_title_precmd
	add-zsh-hook -Uz preexec xterm_title_preexec
fi

#
# Pacman command not found
#

function command_not_found_handler {
    local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
    printf 'zsh: command not found: %s\n' "$1"
    local entries=(
        ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"}
    )
    if (( ${#entries[@]} ))
    then
        printf "${bright}$1${reset} may be found in the following packages:\n"
        local pkg
        for entry in "${entries[@]}"
        do
            # (repo package version file)
            local fields=(
                ${(0)entry}
            )
            if [[ "$pkg" != "${fields[2]}" ]]
            then
                printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
            fi
            printf '    /%s\n' "${fields[4]}"
            pkg="${fields[2]}"
        done
    fi
}

{% endif %}


[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

let "dur = $EPOCHREALTIME - $start"
echo "Execution time: $dur seconds"
