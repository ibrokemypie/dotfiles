zmodload zsh/datetime
start=$EPOCHREALTIME

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


#
# Variables
#

HISTFILE="$HOME/.histfile"
HISTSIZE=1000
SAVEHIST=10000
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_DIR="$HOME/.config/zsh"
ZSH_PLUGS=("powerlevel10k/powerlevel10k.zsh-theme" "zsh-lazyload/zsh-lazyload.zsh" \
		   "fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh" \
		   "zsh-autosuggestions/zsh-autosuggestions.zsh" \
		   "zsh-completions/zsh-completions.plugin.zsh" \
		   "history-search-multi-word/history-search-multi-word.plugin.zsh" \
		   "zsh-history-substring-search/zsh-history-substring-search.zsh" \
		   "fzf-tab/fzf-tab.plugin.zsh" "forgit/forgit.plugin.zsh")

export EDITOR="micro"
export GIT_EDITOR="micro"
export RUSTC_WRAPPER="sccache"
export GPG_TTY="$(tty)"
export FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --hidden"

{% if yadm.os == "Linux" %}
export WINEESYNC=1
export WINEFSYNC=1
export PAGER="moar"
export SYSTEMD_LESS="FRSMK"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
{% endif %}


#
# Path
#

path+=("$HOME/.local/bin" "$HOME/go/bin")
fpath+=("$HOME/.config/zsh/func")

{% if yadm.os == "Linux" %}
path+=("/usr/lib/ccache/bin/")
{% endif %}

{% if yadm.os == "Darwin" %}
export HOMEBREW_PREFIX="/usr/local"
export HOMEBREW_CELLAR="/usr/local/Cellar"
export HOMEBREW_REPOSITORY="/usr/local/Homebrew"
path+=("$HOMEBREW_PREFIX/bin" "$HOMEBREW_PREFIX/sbin" "$HOMEBREW_PREFIX/bin/ccache" "$HOMEBREW_PREFIX/opt/python/libexec/bin")
manpath+=("$HOMEBREW_PREFIX/share/man")
infopath+=("$HOMEBREW_PREFIX/share/info")
fpath+=("$HOMEBREW_PREFIX/share/zsh/site-functions")
{% endif %}


#
# Options
#

setopt sharehistory autocd extendedglob append_history correct \
	   hist_ignore_all_dups hist_verify hist_ignore_space

# The following lines were added by compinstall
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} m:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'l:|=* r:|=*'
zstyle ':completion::complete:*' gain-privileges 1
zstyle ':completion:*' menu select
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':plugin:history-search-multi-word' reset-prompt-protect 1

zle -N edit-command-line
zle -N history-substring-search-up
zle -N history-substring-search-down

autoload -Uz compinit edit-command-line add-zsh-hook add-zle-hook-widget "$ZSH_DIR/func/"*

# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
  compinit -i -C
else
  compinit -i
fi
unset _comp_files

ZSH_FILES=("${ZDOTDIR:-${HOME}}/.zshrc" "${ZDOTDIR:-${HOME}}/.zcompdump" \
           "${ZDOTDIR:-${HOME}}/.p10k.zsh" "$ZSH_DIR"/**/*.zsh "$ZSH_DIR/func/"^(*.zwc)(.) \
           "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh")

zcompare ${ZSH_FILES[*]}

#
# Sources
#

for p in $ZSH_PLUGS; do
	source "$ZSH_DIR/$p"
done
eval "$(zoxide init zsh)"

#
# Aliases
#

alias ls="exa"
alias tree="exa --tree"
alias nano="micro"
alias cat="bat --paging=never"
alias grep="rg -uuu"

if [ -z ${DISPLAY+x} ] ; then
	alias gpg="gpg --pinentry-mode loopback "
fi

{% if yadm.os == "Linux" %}
alias cp="cp --reflink=auto"
alias tkg="bash $HOME/git/tkg/update.sh"
alias copy="xclip -selection c"
alias yay="paru"
alias whichpkg="pacman -Qo"
{% endif %}


#
# Bindings
#
typeset -g -A keyinfo
keyinfo=(
  'Control'         '\C-'
  'Escape'          '\e'
  'Meta'            '\M-'
  'F1'              "$terminfo[kf1]"
  'F2'              "$terminfo[kf2]"
  'F3'              "$terminfo[kf3]"
  'F4'              "$terminfo[kf4]"
  'F5'              "$terminfo[kf5]"
  'F6'              "$terminfo[kf6]"
  'F7'              "$terminfo[kf7]"
  'F8'              "$terminfo[kf8]"
  'F9'              "$terminfo[kf9]"
  'F10'             "$terminfo[kf10]"
  'F11'             "$terminfo[kf11]"
  'F12'             "$terminfo[kf12]"
  'Backspace'       "$terminfo[kbs]"
  'Insert'          "$terminfo[kich1]"
  'Home'            "$terminfo[khome]"
  'PageUp'          "$terminfo[kpp]"
  'Delete'          "$terminfo[kdch1]"
  'End'             "$terminfo[kend]"
  'PageDown'        "$terminfo[knp]"
  'Up'              "$terminfo[kcuu1]"
  'Left'            "$terminfo[kcub1]"
  'Down'            "$terminfo[kcud1]"
  'Right'           "$terminfo[kcuf1]"
  'Control-Left'    "$terminfo[kLFT5]"
  'Control-Right'   "$terminfo[kRIT5]"
  'BackTab'         "$terminfo[kcbt]"
)


# emacs bindings
bindkey -e

# ^x ^e: open commandline in editor
[[ -n "$keyinfo[Control]" ]] && \
  bindkey -- "$keyinfo[Control]X$keyinfo[Control]E" edit-command-line

# up/down history search
[[ -n "$keyinfo[Up]" ]] && \
  bindkey -- "$keyinfo[Up]" history-substring-search-up
[[ -n "$keyinfo[Down]" ]] && \
  bindkey -- "$keyinfo[Down]" history-substring-search-down

# ^left ^right word movement
[[ -n "$keyinfo[Control-Right]" ]] && \
  bindkey -- "$keyinfo[Control]$keyinfo[Control-Right]" forward-word
[[ -n "$keyinfo[Control-Left]" ]] && \
  bindkey -- "$keyinfo[Control]$keyinfo[Control-Left]" backward-word

# home and end
[[ -n "$keyinfo[Home]" ]] && \
  bindkey -- "$keyinfo[Home]" beginning-of-line
[[ -n "$keyinfo[End]" ]] && \
  bindkey -- "$keyinfo[End]" end-of-line
    
# delete
[[ -n "$keyinfo[Delete]" ]] && \
  bindkey -- "$keyinfo[Delete]" delete-char


# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

#
# rbenv
#

lazyload rbenv ruby rake bundle bundler gem irb -- 'eval "$(rbenv init -)"'

{% if yadm.os == "Linux" %}
#
# Completion rehash
#

trap 'rehash' USR1

#
# Terminal title hooks
#

if [[ "$TERM" == (Eterm*|alacritty*|aterm*|gnome*|konsole*|kterm*|putty*|rxvt*|screen*|tmux*|xterm*|foot*) ]]; then
	add-zsh-hook -Uz precmd xterm_title_precmd
	add-zsh-hook -Uz preexec xterm_title_preexec
fi

{% endif %}

#
# Source p10k config
#

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

let "dur = $EPOCHREALTIME - $start"
echo "Execution time: $dur seconds"
