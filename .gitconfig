[user]
	name = ibrokemypie
	email = ibrokemypie@outlook.com
	
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	
[credential]
	helper = /usr/lib/git-core/git-credential-libsecret

[core]
    pager = bat
    editor = micro

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse
    syntax-theme = base16

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

[commit]
	template = ~/.gitcommittemplate

[alias]
	main = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4
	
    st = status

    # Rebase and pull latest for all submodules
    pa = !git pull --rebase && git submodule foreach git pull --rebase

    # Pretty logging
    lg = log --abbrev-commit --pretty=format:'%C(yellow)%h%Creset%C(red)%d%Creset %s %C(blue)%an%Creset %Cgreen(%cr)%Creset' --graph --decorate
    co = checkout

    # Rebase current branch
    rb = "!sh -c 'git pull --rebase origin `git symbolic-ref --short HEAD`'"

    # Push current branch
    ps = "!git push --set-upstream origin $(git symbolic-ref --short HEAD)"

    # create and switch to new branch
    new = "!sh -c 'if [[ -n ${1} ]]; then BASE=${0}; NAME=${1}; else BASE=$(git main); NAME=${0}; fi && if [[ -z $(git rev-parse --quiet --verify $BASE) ]]; then echo \"Base with name $BASE does not exist\"; exit 1; fi && if [[ -n $(git rev-parse --quiet --verify $NAME) ]]; then echo \"Branch with name $NAME already exists\"; exit 1; fi && STASHED=$(git stash push) && git switch $BASE && git pull && git checkout -b $NAME && [[ $STASHED != \"No local changes to save\" ]] && git stash pop'"

	# go to repo's main branch
	home = "!sh -c 'STASHED=$(git stash push) && git switch $(git main) && [[ $STASHED != \"No local changes to save\" ]] && git stash pop'"

	# delete branch
	del = branch -D

	# unstage last commit
	undo = reset HEAD~1 --mixed

	# rename branch
	rename = branch -m
	
    # List all aliases
    la = "!git config -l | grep alias | cut -c 7-"

    fixme = grep -nE \"(FIXME|TODO|XXX)\"
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    accept-ours = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --ours -- $files; git add -u $files; }; f"
    accept-theirs = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --theirs -- $files; git add -u $files; }; f"
    listmerged = "branch --merged"
    recent-branches = "for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/"

[includeif "gitdir:~/git/livepreso/"]
	path = ~/git/livepreso/.gitconfig